# Solução para Validação de Certificados SEFAZ SP

## Problema Identificado

O problema era que você estava tentando usar módulos Node.js (`https`, `fs`, `node-forge`, `xml2js`) diretamente no browser, o que não funciona. Navegadores não podem:

1. Fazer requisições HTTPS com certificados client-side
2. Acessar o sistema de arquivos local
3. Usar APIs de Node.js

## Solução Implementada

### 1. Frontend (React)
- **sefazApi.ts**: Refatorado para delegar todas as operações para o backend
- **CertificateManager.tsx**: Atualizado para fazer upload de certificados via base64
- **certificateService.ts**: Novo serviço para utilitários de certificado
- Removido `xml2js` que causava conflitos no browser

### 2. Backend (Netlify Functions) - PRECISA SER CRIADO
Você precisa criar as seguintes Netlify Functions:

```
netlify/functions/
├── validar-certificado.js
├── testar-conexao.js
├── consultar-xmls.js
└── download-xml.js
```

## Netlify Functions Necessárias

### 1. `/validar-certificado`
```javascript
const forge = require('node-forge');

exports.handler = async (event) => {
  const { certificateBase64, password } = JSON.parse(event.body);
  
  try {
    const pfxBuffer = Buffer.from(certificateBase64, 'base64');
    const pfxDer = pfxBuffer.toString('binary');
    const pfxAsn1 = forge.asn1.fromDer(pfxDer);
    const pfx = forge.pkcs12.pkcs12FromAsn1(pfxAsn1, false, password);
    
    const bags = pfx.getBags({ bagType: forge.pki.oids.certBag });
    const certBag = bags[forge.pki.oids.certBag]?.[0];
    
    if (!certBag?.cert) {
      throw new Error('Certificado não encontrado no PFX');
    }
    
    const cert = certBag.cert;
    
    return {
      statusCode: 200,
      body: JSON.stringify({
        success: true,
        data: {
          subject: cert.subject.attributes.map(attr => `${attr.shortName}=${attr.value}`).join(', '),
          issuer: cert.issuer.attributes.map(attr => `${attr.shortName}=${attr.value}`).join(', '),
          validFrom: cert.validity.notBefore.toISOString(),
          validTo: cert.validity.notAfter.toISOString(),
          serialNumber: cert.serialNumber
        }
      })
    };
  } catch (error) {
    return {
      statusCode: 400,
      body: JSON.stringify({
        success: false,
        error: error.message
      })
    };
  }
};
```

### 2. `/testar-conexao`
```javascript
const https = require('https');
const axios = require('axios');

exports.handler = async (event) => {
  const { certificateBase64, password } = JSON.parse(event.body);
  
  try {
    const pfxBuffer = Buffer.from(certificateBase64, 'base64');
    
    const agent = new https.Agent({
      pfx: pfxBuffer,
      passphrase: password,
      rejectUnauthorized: false
    });
    
    const response = await axios.post(
      'https://nfe.fazenda.sp.gov.br/ws/nfedownload.asmx',
      buildTestSoapEnvelope(),
      {
        httpsAgent: agent,
        headers: {
          'Content-Type': 'application/soap+xml; charset=utf-8',
          'SOAPAction': 'http://www.portalfiscal.inf.br/nfe/wsdl/NfeDownload/nfeDownloadNF'
        }
      }
    );
    
    return {
      statusCode: 200,
      body: JSON.stringify({
        success: true,
        message: 'Conexão estabelecida com sucesso'
      })
    };
  } catch (error) {
    return {
      statusCode: 400,
      body: JSON.stringify({
        success: false,
        error: error.message
      })
    };
  }
};
```

## Próximos Passos

1. **Instale as dependências no backend**:
```bash
npm install node-forge axios xml2js
```

2. **Crie as Netlify Functions** conforme os exemplos acima

3. **Configure as variáveis de ambiente** no Netlify:
   - Certificados em produção devem ser armazenados de forma segura
   - Considere usar Netlify Environment Variables

4. **Teste a aplicação**:
   - Faça upload de um certificado real
   - Verifique se a validação funciona
   - Teste as consultas à SEFAZ

## Observações Importantes

- **Segurança**: Certificados contêm informações sensíveis. Em produção, considere criptografia adicional
- **Performance**: Validação de certificados pode ser lenta. Considere cache quando apropriado
- **Logs**: Implemente logs detalhados para debug
- **CORS**: Configure CORS adequadamente nas Netlify Functions

## Estrutura Atual

```
Frontend (React)
├── sefazApi.ts → Faz requests para backend
├── CertificateManager.tsx → Interface de upload
└── certificateService.ts → Utilitários

Backend (Netlify Functions) - A CRIAR
├── validar-certificado.js
├── testar-conexao.js
├── consultar-xmls.js
└── download-xml.js
```

A aplicação agora está arquitetada corretamente para funcionar com certificados reais da SEFAZ SP!